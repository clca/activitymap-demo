/*
 * EventManager
 * EventManager is a simple API allowing user to interact with EventManager.  It allows user to:  * register/unregister an EventProvider with EventManager  * get the information of a registered EventProvider  * list all the registered EventProvider  * send event to the EventBus via EventManager
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Stream;

@javax.annotation.Generated(value = "com.oracle.aura.clientgen.template.java.Generator", date = "2017-12-07T15:11:31.765Z")
public final class HeaderUtil {

    private static final String X_B3_TRACE_ID = "x-b3-traceid";
    private static final String X_B3_SPAN_ID = "x-b3-spanid";
    private static final String X_B3_PARENT_SPAN_ID = "x-b3-parentspanid";
    private static final String X_OT_SPAN_CONTEXT = "x-ot-span-context";
    private static final String X_REQUEST_ID = "x-request-id";
    private static final String X_B3_SAMPLED = "x-b3-sampled";
    private static final String X_B3_FLAGS = "x-b3-flags";

    private static final Set<String> TRACING_CONTEXT_PROPAGATION_HEADERS =
            createCaseInsensitiveTreeSet(
                    X_B3_TRACE_ID,
                    X_B3_SPAN_ID,
                    X_B3_PARENT_SPAN_ID,
                    X_OT_SPAN_CONTEXT,
                    X_REQUEST_ID,
                    X_B3_SAMPLED,
                    X_B3_FLAGS);

    /**
     * Extract tracing headers from incoming request headers.
     *
     * @param requestHeaders incoming request headers
     * @return headers as stream of pairs, only tracing headers are included
     */
    public static Stream<Pair> extractTracingHeaders(Map<String, List<String>> requestHeaders) {
        return requestHeaders.keySet().stream()
                .filter(key -> TRACING_CONTEXT_PROPAGATION_HEADERS.contains(key))
                .flatMap(key -> Optional.ofNullable(requestHeaders.get(key)).orElse(Collections.emptyList())
                                        .stream().map(value -> new Pair(key, value)));
    }

    /** Creates case insensitive tree set from given strings.
     *
     * @param values array of strings
     * @return tree set with case insensitive order
     */
    private static Set<String> createCaseInsensitiveTreeSet(String... values) {
        Set<String> set = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
        for(String value: values) {
            set.add(value);
        }
        return set;
    }

    private HeaderUtil() {
        // no instances
    }

}
