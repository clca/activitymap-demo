/**
 * githubstats API
 * ## Version [V3]  Generate Github statistics on:  * number of commits  * number of stars  * Aggregated activity  for GitHub projects aggregated by US States
 *
 * OpenAPI spec version: 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['ApiClient'], factory);
    } else if (typeof module === 'object' && module.exports) {
      // CommonJS-like environments that support module.exports, like Node.
      module.exports = factory(require('../ApiClient'));
    } else {
      // Browser globals (root is window)
      if (!root.GithubstatsApi) {
        root.GithubstatsApi = {};
      }
      root.GithubstatsApi.HistoryApi = factory(root.GithubstatsApi.ApiClient);
    }
  }(this, function(ApiClient) {
    'use strict';
  
    /**
     * Stats service.
     * @module api/HistoryApi
     * @version 1.0.0
     */
  
    /**
     * Constructs a new StatsApi. 
     * @alias module:api/HistoryApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    var exports = function(apiClient) {
      this.apiClient = apiClient || ApiClient.instance;
  
  
      /**
       * Callback function to receive the result of the githubstatsStatsGet operation.
       * @callback module:api/HistoryApi~githubstatsHistoryGetCallback
       * @param {String} error Error message, if any.
       * @param data This operation does not return a value.
       * @param {String} response The complete HTTP response.
       */
  
      /**
       * Retrieve all Stats
       * 
       * @param {module:api/HistoryApi~githubstatsHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
       * @param {Object|undefined} additionalHeaders key / value pairs of additional headers to put into request.
       */
      this.githubstatsHistoryGet = function(from, to, callback, additionalHeaders) {
        var postBody = null;
  
        // verify the required parameter 'usState' is set
        if (from === undefined || from === null) {
            throw new Error("Missing the required parameter 'from' when calling statsUsStateGet");
          }
          // verify the required parameter 'usState' is set
          if (to === undefined || to === null) {
            throw new Error("Missing the required parameter 'to' when calling statsUsStateGet");
          }
    
    
    
        var pathParams = {
        };
        var queryParams = {
            'from': from,
            'to': to
            
        };
        var collectionQueryParams = {
        };
        var headerParams = {
        };
        if (additionalHeaders !== undefined) {
          for (var key in additionalHeaders) {
            if (additionalHeaders.hasOwnProperty(key)) {
              headerParams[key] = additionalHeaders[key];
            }
          }
        }
        var formParams = {
        };
  
        var authNames = [];
        var contentTypes = [];
        var accepts = ['application/json'];
        var returnType = null;
  
        return this.apiClient.callApi(
          '/githubstats/history{?from,to}', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
        );
      }
    };
  
    return exports;
  }));
  