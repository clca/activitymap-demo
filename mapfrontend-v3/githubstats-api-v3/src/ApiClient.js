/**
 * githubstats API
 * ## Version [V3]  Generate Github statistics on:  * number of commits  * number of stars  * Aggregated activity  for GitHub projects aggregated by US States
 *
 * OpenAPI spec version: 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['superagent', 'querystring'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('superagent'), require('querystring'));
  } else {
    // Browser globals (root is window)
    if (!root.GithubstatsApi) {
      root.GithubstatsApi = {};
    }
    root.GithubstatsApi.ApiClient = factory(root.superagent, root.querystring);
  }
}(this, function(superagent, querystring) {
  'use strict';

  /**
   * @module ApiClient
   * @version 1.0.0
   */

  /**
   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
   * application to use this class directly - the *Api and model classes provide the public API for the service. The
   * contents of this file should be regarded as internal but are documented for completeness.
   * @alias module:ApiClient
   * @class
   */
  var exports = function() {
    this.tracingHeaders = ["x-request-id",
    "x-b3-traceid",
    "x-b3-spanid",
    "x-b3-parentspanid",
    "x-b3-sampled",
    "x-b3-flags",
    "x-ot-span-context"];


    /**
    * Extracts tracing headers for Istio distributed tracing.
    * Get headers from incoming request, call this method to extract
    * Istio tracing headers and use them in following requests.
    *
    * @param {Object} incomingHeaders headers of incoming request
    * @return {Object} extracted Istio tracing headers
    */
    this.extractTracingHeaders = function(incomingHeaders) {
      var incomingTracingHeaders = {};
      this.tracingHeaders.forEach(function(headerKey) {
        for (var key in incomingHeaders) {
          if(key.toUpperCase() === headerKey.toUpperCase()) {
            incomingTracingHeaders[key]=incomingHeaders[key];
          }
        }
      });
      return incomingTracingHeaders;
    }
    /**
     * The base URL against which to resolve every API call's (relative) path.
     * @type {String}
     * @default http://polls.apiblueprint.org
     */
    this.basePath = 'http://polls.apiblueprint.org'.replace(/\/+$/, '');

    /**
     * The URL of discovery service endpoint; discovery service will be called only if this field is not null.
     * @type {String|null}
     */
    this.discoveryUrl = null;

    /**
     * Method to process discovery properites (`service` field) to base URL; discovery service will be called only if this field is not null.
     * @type {String|null}
     */
    this.objectToBaseUrl = null;


    /**
     * The authentication methods to be included for all API calls.
     * @type {Array.<String>}
     */
    this.authentications = {
    };
    /**
     * The default HTTP headers to be included for all API calls.
     * @type {Array.<String>}
     * @default {}
     */
    this.defaultHeaders = {};

    /**
     * The default HTTP timeout for all API calls.
     * @type {Number}
     * @default 60000
     */
    this.timeout = 60000;

    /**
     * If set to false an additional timestamp parameter is added to all API GET calls to
     * prevent browser caching
     * @type {Boolean}
     * @default true
     */
    this.cache = true;

    /**
     * If set to true, the client will save the cookies from each server
     * response, and return them in the next request.
     * @default false
     */
    this.enableCookies = false;

    /*
     * Used to save and return cookies in a node.js (non-browser) setting,
     * if this.enableCookies is set to true.
     */
    if (typeof window === 'undefined') {
      this.agent = new superagent.agent();
    }

  };

  /**
   * Returns a string representation for an actual parameter.
   * @param param The actual parameter.
   * @returns {String} The string representation of <code>param</code>.
   */
  exports.prototype.paramToString = function(param) {
    if (param == undefined || param == null) {
      return '';
    }
    if (param instanceof Date) {
      return param.toJSON();
    }
    return param.toString();
  };

  /**
   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
   * NOTE: query parameters are not handled here.
   * @param {String} baseUrl The base URL.
   * @param {String} path The path to append to the base URL.
   * @param {Object} pathParams The parameter values to append.
   * @return {String} full url
   */
  exports.prototype.buildFullUrl = function(baseUrl, path, pathParams) {
    var _this = this;
    if (!path.match(/^\//)) {
      path = '/' + path;
    }
    var url = (baseUrl + path).replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
      var value;
      if (pathParams.hasOwnProperty(key)) {
        value = _this.paramToString(pathParams[key]);
      } else {
        value = fullMatch;
      }
      return encodeURIComponent(value);
    });
    return url;
  };

  /**
   * Constructor of discovery service client - an singleton object for handling discovery.
   */
  function DiscoveryServiceClient() {

    function getCacheExpirationTimeout() {
      var timeoutEnv = process.env.API_DISCOVERY_EXPIRATION;
      if (timeoutEnv) {
        var timeoutNumber = Number(timeoutEnv);
        if (timeoutNumber && timeoutNumber > 0) {
          return timeoutNumber;
        }
      }
      return 300000; // 5 mins
    }

    function getCurrentTimeMilis() {
      var date = new Date();
      return date.getTime();
    }

    this.cacheExpirationTimeout = getCacheExpirationTimeout();
    this.cache = null;
    this.cacheExpiration = 0;

    function handleDiscoveryError(error, response, url, message, callback) {
      var safeMessage = '.';
      if (message) {
        safeMessage = ': ' + message;
      }
      if (response) {
        var responseBody = response.body;
        if (responseBody
            && typeof(responseBody) === 'object'
            && responseBody.message
            && typeof(responseBody.message) === 'string') {
          callback(new Error('Discovery error' + safeMessage + ' Status: ' + response.status + ', ' +
              'message: ' + responseBody.message + ', url: ' + url), null);
        } else {
          callback(new Error('Discovery error' + safeMessage + ' Status: ' + response.status + ', ' +
              'url: ' + url), null);
        }
      } else if (error) {
        callback(new Error('Discovery error' + safeMessage + ' Error: ' + error + ', url: ' + url), null);
      } else {
        callback(new Error('Discovery error' + safeMessage + ' Url: ' + url), null);
      }
    }

    function callDiscovery(options, callback) {
      if (options.discoveryUrl
          && typeof(options.discoveryUrl) === 'string'
          && options.objectToBaseUrl
          && typeof(options.objectToBaseUrl === 'function')) {
        var request = superagent('GET', options.discoveryUrl);
        request.timeout(options.timeout);
        request.accept('application/json');
        request.end(function(error, response) {
          if (error) {
            handleDiscoveryError(error, response, options.discoveryUrl, null, callback);
          } else if (response && response.status == 200) {
            var responseBody = response.body;
            if (responseBody
                && typeof(responseBody) === 'object'
                && responseBody.service
                && typeof(responseBody.service) === 'object') {
              var url = options.objectToBaseUrl(responseBody.service);
              var headers = responseBody.service.headers || {};
              callback(null, { url: url, headers: headers });
            } else {
              handleDiscoveryError(error, response, options.discoveryUrl, 'Missing `service` field in response.', callback);
            }
          } else {
            handleDiscoveryError(error, response, options.discoveryUrl, null, callback);
          }
        });
      } else {
        callback(null, { url: options.staticUrl, headers: {} });
      }
      return true;
    }

    /**
     * Get connection info from discovery service.
     * @param {Object} options - object holding options for discovery call
     * @param {string} options.discoveryUrl - URL of discovery service (null to disable dynamic discovery)
     * @param {boolean} options.force - flag whether to force discovery service call (even if e.g. there is a valid cached result)
     * @param {Object} options.headers - object containing headers for discovery call
     * @param {function} options.objectToBaseUrl - function that converts object with properties to base URL
     * @param {string} options.staticUrl - statically configured URL to use when discovery is not enabled
     * @param {number} options.timeout - timeout for discovery call
     * @param {function} callback - function to accept error (first arg) or connection info (second arg)
     */
    this.getConnectionInfo = function (options, callback) {
      var _this = this;
      var now = getCurrentTimeMilis();
      if (options.force || !_this.cache || _this.cacheExpiration < now) {
        return callDiscovery(options, function (error, result) {
          if (error) {
            callback(error, result);
          } else {
            _this.cache = result;
            _this.cacheExpiration = now + _this.cacheExpirationTimeout;
            callback(error, result);
          }
        });
      } else {
        callback(null, _this.cache);
        return true;
      }
    }

    /**
     * Compares two connection info objects, returns true if they are equal.
     * @param {Object} first - first connection info
     * @param {string} first.url - URL string of first connection info
     * @param {Object} first.headers - headers object of first connection info
     * @param {Object} second - second connection info
     * @param {string} second.url - URL string of second connection info
     * @param {Object} second.headers - headers object of second connection info
     * @return {boolean} true if first and second have the same content (in terms of recognized properties)
     */
    this.areEqualConnectionInfoObjects = function (first, second) {
      if (first === second) {
        return true;
      } else if (!first && !second) {
        return true;
      } else if (!first || !second) {
        return false;
      } else {
        return first.url === second.url && JSON.stringify(first.headers || {}) === JSON.stringify(second.headers || {});
      }
    }

  }

  var discoveryServiceClient = new DiscoveryServiceClient();



  /**
   * Checks whether the given content type represents JSON.<br>
   * JSON content type examples:<br>
   * <ul>
   * <li>application/json</li>
   * <li>application/json; charset=UTF8</li>
   * <li>APPLICATION/JSON</li>
   * </ul>
   * @param {String} contentType The MIME content type to check.
   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
   */
  exports.prototype.isJsonMime = function(contentType) {
    return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
  };

  /**
   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
   * @param {Array.<String>} contentTypes
   * @returns {String} The chosen content type, preferring JSON.
   */
  exports.prototype.jsonPreferredMime = function(contentTypes) {
    for (var i = 0; i < contentTypes.length; i++) {
      if (this.isJsonMime(contentTypes[i])) {
        return contentTypes[i];
      }
    }
    return contentTypes[0];
  };

  /**
   * Checks whether the given parameter value represents file-like content.
   * @param param The parameter to check.
   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
   */
  exports.prototype.isFileParam = function(param) {
    // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)
    if (typeof require === 'function') {
      var fs;
      try {
        fs = require('fs');
      } catch (err) {}
      if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
        return true;
      }
    }
    // Buffer in Node.js
    if (typeof Buffer === 'function' && param instanceof Buffer) {
      return true;
    }
    // Blob in browser
    if (typeof Blob === 'function' && param instanceof Blob) {
      return true;
    }
    // File in browser (it seems File object is also instance of Blob, but keep this for safe)
    if (typeof File === 'function' && param instanceof File) {
      return true;
    }
    return false;
  };

  /**
   * Normalizes parameter values:
   * <ul>
   * <li>remove nils</li>
   * <li>keep files and arrays</li>
   * <li>format to string with `paramToString` for other cases</li>
   * </ul>
   * @param {Object.<String, Object>} params The parameters as object properties.
   * @returns {Object.<String, Object>} normalized parameters.
   */
  exports.prototype.normalizeParams = function(params) {
    var newParams = {};
    for (var key in params) {
      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
        var value = params[key];
        if (this.isFileParam(value) || Array.isArray(value)) {
          newParams[key] = value;
        } else {
          newParams[key] = this.paramToString(value);
        }
      }
    }
    return newParams;
  };

  /**
   * Enumeration of collection format separator strategies.
   * @enum {String}
   * @readonly
   */
  exports.CollectionFormatEnum = {
    /**
     * Comma-separated values. Value: <code>csv</code>
     * @const
     */
    CSV: ',',
    /**
     * Space-separated values. Value: <code>ssv</code>
     * @const
     */
    SSV: ' ',
    /**
     * Tab-separated values. Value: <code>tsv</code>
     * @const
     */
    TSV: '\t',
    /**
     * Pipe(|)-separated values. Value: <code>pipes</code>
     * @const
     */
    PIPES: '|',
    /**
     * Native array. Value: <code>multi</code>
     * @const
     */
    MULTI: 'multi'
  };

  /**
   * Builds a string representation of an array-type actual parameter, according to the given collection format.
   * @param {Array} param An array parameter.
   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
   */
  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {
    if (param == null) {
      return null;
    }
    switch (collectionFormat) {
      case 'csv':
        return param.map(this.paramToString).join(',');
      case 'ssv':
        return param.map(this.paramToString).join(' ');
      case 'tsv':
        return param.map(this.paramToString).join('\t');
      case 'pipes':
        return param.map(this.paramToString).join('|');
      case 'multi':
        // return the array directly as SuperAgent will handle it as expected
        return param.map(this.paramToString);
      default:
        throw new Error('Unknown collection format: ' + collectionFormat);
    }
  };

  /**
   * Applies authentication headers to the request.
   * @param {Object} request The request object created by a <code>superagent()</code> call.
   * @param {Array.<String>} authNames An array of authentication method names.
   */
  exports.prototype.applyAuthToRequest = function(request, authNames) {
    var _this = this;
    authNames.forEach(function(authName) {
      var auth = _this.authentications[authName];
      switch (auth.type) {
        case 'basic':
          if (auth.username || auth.password) {
            request.auth(auth.username || '', auth.password || '');
          }
          break;
        case 'apiKey':
          if (auth.apiKey) {
            var data = {};
            if (auth.apiKeyPrefix) {
              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;
            } else {
              data[auth.name] = auth.apiKey;
            }
            if (auth['in'] === 'header') {
              request.set(data);
            } else {
              request.query(data);
            }
          }
          break;
        case 'oauth2':
          if (auth.accessToken) {
            request.set({'Authorization': 'Bearer ' + auth.accessToken});
          }
          break;
        default:
          throw new Error('Unknown authentication type: ' + auth.type);
      }
    });
  };

  /**
   * Deserializes an HTTP response body into a value of the specified type.
   * @param {Object} response A SuperAgent response object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns A value of the specified type.
   */
  exports.prototype.deserialize = function deserialize(response, returnType) {
    if (response == null || returnType == null || response.status == 204) {
      return null;
    }
    // Rely on SuperAgent for parsing response body.
    // See http://visionmedia.github.io/superagent/#parsing-response-bodies
    var data = response.body;
    if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {
      // SuperAgent does not always produce a body; use the unparsed response as a fallback
      data = response.text;
    }
    return exports.convertToType(data, returnType);
  };

  /**
   * Callback function to receive the result of the operation.
   * @callback module:ApiClient~callApiCallback
   * @param {String} error Error message, if any.
   * @param data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Invokes the REST service using the supplied settings and parameters.
   * @param {String} path The base URL to invoke.
   * @param {String} httpMethod The HTTP method to use.
   * @param {Object.<String, String>} pathParams A map of path parameters and their values.
   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
   * @param {Object.<String, Object>} collectionQueryParams A map of collection query parameters and their values.
   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
   * @param {Object.<String, Object>} formParams A map of form parameters and their values.
   * @param {Object} bodyParam The value to pass as the request body.
   * @param {Array.<String>} authNames An array of authentication type names.
   * @param {Array.<String>} contentTypes An array of request MIME types.
   * @param {Array.<String>} accepts An array of acceptable response MIME types.
   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
   * constructor for a complex type.
   * @param {module:ApiClient~callApiCallback} callback The callback function.
   * @returns {Object} The SuperAgent request object.
   */
  exports.prototype.callApi = function callApi(path, httpMethod, pathParams, queryParams, collectionQueryParams,
                                                             headerParams, formParams, bodyParam, authNames, contentTypes,
                                                             accepts, returnType, callback) {

    var _this = this;

    internalCallApi(_this, path, httpMethod, pathParams, queryParams, collectionQueryParams, headerParams, formParams, bodyParam,
                      authNames, contentTypes, accepts, returnType, callback);
    return true;
  };

  function internalCallApi(_this, path, httpMethod, pathParams, queryParams, collectionQueryParams, headerParams, formParams, bodyParam,
                           authNames, contentTypes, accepts, returnType, callback) {
    var options = {
      discoveryUrl: _this.discoveryUrl,
      force: false,
      headers: {},
      objectToBaseUrl: _this.objectToBaseUrl,
      timeout: _this.timeout,
      staticUrl: _this.basePath
    }
    discoveryServiceClient.getConnectionInfo(options, function(err, connectionInfo) {
        if (err) {
          callback(err, null);
        } else {
          var url = _this.buildFullUrl(connectionInfo.url, path, pathParams);
          internalCallApiWithConnectionInfo(_this, url, httpMethod, queryParams, collectionQueryParams, headerParams,
              connectionInfo.headers, formParams, bodyParam, authNames, contentTypes, accepts, returnType,
              function(error, data, response) {
                if (error) {
                  options.force = true;
                  discoveryServiceClient.getConnectionInfo(options,
                      function(discoveryError, newConnectionInfo) {
                        if (discoveryError) {
                          callback(error, data, response);
                        } else if (discoveryServiceClient.areEqualConnectionInfoObjects(connectionInfo, newConnectionInfo)) {
                          callback(error, data, response);
                        } else {
                          url = _this.buildFullUrl(newConnectionInfo.url, path, pathParams);
                          internalCallApiWithConnectionInfo(_this, url, httpMethod, queryParams, collectionQueryParams, headerParams,
                              connectionInfo.headers, formParams, bodyParam, authNames, contentTypes, accepts, returnType, callback);
                        }
                      });
                } else {
                  callback(error, data, response);
                }
              });
        }
      });
    return true;
  }

  function internalCallApiWithConnectionInfo(_this, url, httpMethod, queryParams, collectionQueryParams, headerParams, discoveryHeaderParams, formParams, bodyParam,
                              authNames, contentTypes, accepts, returnType, callback) {
    var request = superagent(httpMethod, url);

    // apply authentications
    _this.applyAuthToRequest(request, authNames);

    // set collection query parameters
    for (var key in collectionQueryParams) {
      if (collectionQueryParams.hasOwnProperty(key)) {
        var param = collectionQueryParams[key];
        if (param.collectionFormat === 'csv') {
          // SuperAgent normally percent-encodes all reserved characters in a query parameter. However,
          // commas are used as delimiters for the 'csv' collectionFormat so they must not be encoded. We
          // must therefore construct and encode 'csv' collection query parameters manually.
          if (param.value != null) {
            var value = param.value.map(_this.paramToString).map(encodeURIComponent).join(',');
            request.query(encodeURIComponent(key) + "=" + value);
          }
        } else {
          // All other collection query parameters should be treated as ordinary query parameters.
          queryParams[key] = _this.buildCollectionParam(param.value, param.collectionFormat);
        }
      }
    }

    // set query parameters
    if (httpMethod.toUpperCase() === 'GET' && _this.cache === false) {
        queryParams['_'] = new Date().getTime();
    }
    request.query(_this.normalizeParams(queryParams));

    // set header parameters
    request.set(_this.defaultHeaders)
           .set(_this.normalizeParams(discoveryHeaderParams))
           .set(_this.normalizeParams(headerParams));

    // set request timeout
    request.timeout(_this.timeout);

    var contentType = _this.jsonPreferredMime(contentTypes);
    if (contentType) {
      // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)
      if(contentType != 'multipart/form-data') {
        request.type(contentType);
      }
    } else if (!request.header['Content-Type']) {
      request.type('application/json');
    }

    if (contentType === 'application/x-www-form-urlencoded') {
      request.send(querystring.stringify(_this.normalizeParams(formParams)));
    } else if (contentType == 'multipart/form-data') {
      var _formParams = _this.normalizeParams(formParams);
      for (var key in _formParams) {
        if (_formParams.hasOwnProperty(key)) {
          if (_this.isFileParam(_formParams[key])) {
            // file field
            request.attach(key, _formParams[key]);
          } else {
            request.field(key, _formParams[key]);
          }
        }
      }
    } else if (bodyParam) {
      request.send(bodyParam);
    }

    var accept = _this.jsonPreferredMime(accepts);
    if (accept) {
      request.accept(accept);
    }

    if (returnType === 'Blob') {
      request.responseType('blob');
    } else if (returnType === 'String') {
      request.responseType('string');
    }

    // Attach previously saved cookies, if enabled
    if (_this.enableCookies){
      if (typeof window === 'undefined') {
        _this.agent.attachCookies(request);
      }
      else {
        request.withCredentials();
      }
    }

    request.end(function(error, response) {
      if (callback) {
        var data = null;
        if (!error) {
          try {
            data = _this.deserialize(response, returnType);
            if (_this.enableCookies && typeof window === 'undefined'){
              _this.agent.saveCookies(response);
            }
          } catch (err) {
            error = err;
          }
        }
        callback(error, data, response);
      }
    });
    return true;
  }

  /**
   * Parses an ISO-8601 string representation of a date value.
   * @param {String} str The date value as a string.
   * @returns {Date} The parsed date object.
   */
  exports.parseDate = function(str) {
    return new Date(str.replace(/T/i, ' '));
  };

  /**
   * Converts a value to the specified type.
   * @param {(String|Object)} data The data to convert, as a string or object.
   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
   * all properties on <code>data<code> will be converted to this type.
   * @returns An instance of the specified type or null or undefined if data is null or undefined.
   */
  exports.convertToType = function(data, type) {
    if (data === null || data === undefined)
      return data

    switch (type) {
      case 'Boolean':
        return Boolean(data);
      case 'Integer':
        return parseInt(data, 10);
      case 'Number':
        return parseFloat(data);
      case 'String':
        return String(data);
      case 'Date':
        return this.parseDate(String(data));
      case 'Blob':
      	return data;
      default:
        if (type === Object) {
          // generic object, return directly
          return data;
        } else if (typeof type === 'function') {
          // for model type like: User
          return type.constructFromObject(data);
        } else if (Array.isArray(type)) {
          // for array type like: ['String']
          var itemType = type[0];
          return data.map(function(item) {
            return exports.convertToType(item, itemType);
          });
        } else if (typeof type === 'object') {
          // for plain object type like: {'String': 'Integer'}
          var keyType, valueType;
          for (var k in type) {
            if (type.hasOwnProperty(k)) {
              keyType = k;
              valueType = type[k];
              break;
            }
          }
          var result = {};
          for (var k in data) {
            if (data.hasOwnProperty(k)) {
              var key = exports.convertToType(k, keyType);
              var value = exports.convertToType(data[k], valueType);
              result[key] = value;
            }
          }
          return result;
        } else {
          // for unknown type, return the data directly
          return data;
        }
    }
  };

  /**
   * Constructs a new map or array model from REST data.
   * @param data {Object|Array} The REST data.
   * @param obj {Object|Array} The target object or array.
   */
  exports.constructFromObject = function(data, obj, itemType) {
    if (Array.isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        if (data.hasOwnProperty(i))
          obj[i] = exports.convertToType(data[i], itemType);
      }
    } else {
      for (var k in data) {
        if (data.hasOwnProperty(k))
          obj[k] = exports.convertToType(data[k], itemType);
      }
    }
  };

  /**
   * The default API client implementation.
   * @type {module:ApiClient}
   */
  exports.instance = new exports();

  return exports;
}));
